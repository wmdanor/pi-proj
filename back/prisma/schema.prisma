generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id             String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName      String
  lastName       String
  patronymic     String
  publicNameType AuthorPublicNameType
  publicName     String
  birthdate      DateTime             @db.Date
  postalAddress  String
  iprs           Ipr[]
}

model Ipr {
  id                          String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  applicationNumber           String
  applicationDate             DateTime
  copyrightRegistrationNumber String
  copyrightRegistrationDate   DateTime
  certificateIssueDate        DateTime
  officialBulletinNumber      String
  publicationSphereData       String
  publicationTitle            String
  publicationAlternativeTitle String?
  publicationObject           PublicationObjectType @relation(fields: [publicationObjectTypeId], references: [id])
  publicationOrigin           String
  publicationCreationReason   String
  authors                     Author[]
  publicationPublicData       String?
  paymentReceiptCode          String?
  createdBy                   User                  @relation(fields: [userId], references: [id])

  iprUpdatesLogs          IprUpdatesLog[]
  publicationObjectTypeId String          @db.Uuid
  userId                  String          @db.Uuid
}

model IprUpdatesLog {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime           @default(now()) @db.Timestamptz(6)
  ipr            Ipr                @relation(fields: [iprId], references: [id])
  user           User               @relation(fields: [userId], references: [id])
  type           IprUpdatesLogsType
  updateReason   String
  description    String
  documentNumber String?
  iprId          String             @db.Uuid
  userId         String             @db.Uuid
}

model Organization {
  id              String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  addressCity     String?
  addressDistrict String?
  addressStreet   String?
  addressHouse    String?
  users           User[]
}

model PassportAuthority {
  id       String  @id @db.Uuid
  code     String  @db.VarChar(4)
  name     String
  isActive Boolean @default(true)
  address  String
}

model User {
  id                   String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String        @unique @db.VarChar(255)
  password             String
  createdAt            DateTime      @default(now()) @db.Timestamptz(6)
  role                 UserRole
  firstName            String
  lastName             String
  patronymic           String
  birthDate            DateTime      @db.Date
  passportSeries       String?
  passportNumber       String
  passportIssueDate    DateTime      @db.Date
  passportAuthority    String        @db.VarChar(4)
  inn                  String?
  organization         Organization? @relation(fields: [organizationId], references: [id])
  organizationPosition String?
  isActive             Boolean       @default(true)

  iprUpdatesLogs IprUpdatesLog[]
  organizationId String?         @db.Uuid
  Ipr            Ipr[]
}

model PublicationObjectType {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique
  Ipr  Ipr[]
}

enum AuthorPublicNameType {
  Pseudonym
  RealName
}

enum IprUpdatesLogsType {
  Update
  Delete
  Create
}

enum UserRole {
  Administrator
  Recorder
}
