generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id             String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName      String
  lastName       String
  patronymic     String
  birthdate      DateTime                @db.Date
  postalAddress  String
  iprUpdatesLogs IprAuthorRelationship[]
}

model Ipr {
  id                          String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  applicationNumber           String
  applicationDate             DateTime
  copyrightRegistrationNumber String
  copyrightRegistrationDate   DateTime
  certificateIssueDate        DateTime
  officialBulletinNumber      String
  publicationSphereData       String
  publicationTitle            String
  publicationAlternativeTitle String?
  publicationObjectId         String               @db.Uuid
  publicationOrigin           PublicationOrigin
  publicationCreationReason   String
  authorPublicNameType        AuthorPublicNameType
  publicationPublicData       String?
  paymentReceiptCode          String?

  publicationObject      PublicationObjectType   @relation(fields: [publicationObjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  iprAuthorRelationships IprAuthorRelationship[]
  iprUpdatesLogs         IprUpdatesLog[]
}

model IprAuthorRelationship {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  iprId    String @db.Uuid
  authorId String @db.Uuid
  author   Author @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ipr      Ipr    @relation(fields: [iprId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model IprUpdatesLog {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime           @default(now()) @db.Timestamptz(6)
  userId         String             @db.Uuid
  affectedIprId  String             @db.Uuid
  type           IprUpdatesLogsType
  updateReason   String
  description    String
  documentNumber String?

  ipr  Ipr  @relation(fields: [affectedIprId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Organization {
  id              String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  addressCity     String?
  addressDistrict String?
  addressStreet   String?
  addressHouse    String?
  users           User[]
}

model PassportAuthority {
  id       String  @id @db.Uuid
  code     String  @db.VarChar(4)
  name     String
  isActive Boolean @default(true)
  address  String
}

model User {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String   @unique @db.VarChar(255)
  password             String
  createdAt            DateTime @default(now()) @db.Timestamptz(6)
  role                 UserRole
  firstName            String
  lastName             String
  patronymic           String
  birthDate            DateTime @db.Date
  passportSeries       String?
  passportNumber       String
  passportIssueDate    DateTime @db.Date
  passportAuthority    String   @db.VarChar(4)
  inn                  String?
  organizationId       String?  @db.Uuid
  organizationPosition String?
  isActive             Boolean  @default(true)

  organization   Organization?   @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  iprUpdatesLogs IprUpdatesLog[]
}

model PublicationObjectType {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique
  Ipr  Ipr[]
}

enum AuthorPublicNameType {
  Pseudonym
  RealName
}

enum IprUpdatesLogsType {
  Update
  Delete
  Create
}

enum PublicationOrigin {
  Derivative
  NonDerivative
}

enum UserRole {
  Administrator
  Recorder
}
